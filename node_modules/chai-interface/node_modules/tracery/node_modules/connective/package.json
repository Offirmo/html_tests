{
  "name": "connective",
  "version": "1.0.0",
  "description": "combine predicate (bool returning) functions with propositional logic connectives (and, or, not)",
  "keywords": [
    "functional",
    "predicate",
    "higher order functions",
    "boolean",
    "propositional",
    "logic"
  ],
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:AgileDiagnosis/node-connective.git"
  },
  "author": {
    "name": "Agile Diagnosis"
  },
  "contributors": [
    {
      "name": "jden",
      "email": "jason@denizac.org"
    }
  ],
  "license": "MIT",
  "devDependencies": {
    "sinon-chai": "~2.3.1",
    "chai-interface": "~1.0.1",
    "chai": "~1.5.0",
    "mocha": "~1.8.1",
    "sinon": "~1.5.2"
  },
  "readme": "# connective\ncombine predicate (bool returning) functions with propositional logic connectives (and, or, not)\n\n## installation\n\n    $ npm install connective\n\n## usage\n```js\nvar connective = require('connective')\nvar or = connective.or\nvar and = connective.and\nvar not = connective.and\n\nfunction wearsFlannel (person) {\n  return person.wearing === 'flannel'\n}\n\nfunction ridesBikes (person) {\n  return person.rides === 'bikes'\n}\n\nvar isSquare = not(or(wearsFlannel, ridesBikes))\nvar isHipster = and(wearsFlannel, ridesBikes)\nvar isLumberjack = and(wearsFlannel, not(ridesBikes))\n\nvar people = {\n  jon: { wearing: 'flannel', rides: 'nothing'}\n  kurt: { wearing: 'flannel', rides: 'bikes'}\n  bob: { wearing: 'hoodie', rides: 'scooters'}\n}\n\nfor(var name in people) {\n  var person = people[name]\n  console.log(name, isSquare(person), isHipster(person), isLumberjack(person))\n}\n```\n\n## about\n\nIn propositional logic, boolean statements are joined together by connectives. Logicians would call them conjunctions,  disjunctions, and negations, but programmers know them as `&&`, `||`, and `!`. The problem with using these language-level connective operators is that they apply at evaluation time, and thus aren't very composable.\n\nFunctions which take a value and return a boolean are known as predicates. They are useful, for example, in conditional branching, validation, and business rules.\n\nThe functions in `connective` let you compose predicates into composite expressions which can be used as functions and evaluated later against other data.\n\n## api\n\nIn describing function signatures below, `Predicate` is a function which takes any number of arguments and returns a `boolean`: `function(...) => boolean`\n\n### `connective.or: function (term1 : Predicate, ..., termN : Predicate) => Predicate`\n\nReturns a Predicate combining one or more Predicate terms with a logical `or` (disjunction), roughly equivalent to writing\n\n    function (x) { return Predicate1(x) || Predicate2(x) }\n\nThe returned Predicate will pass through its `this` context and arguments to each of the Predicate terms which are necessary to evaluate the expression.\n\n### `connective.and: function (term1 : Predicate, ... termN : Predicate) => Predicate`\n\nReturns a Predicate combining one or more Predicate terms with a logical `and` (conjunction), roughly equivalent to writing\n\n    function (x) { return Predicate1(x) && Predicate2(x) }\n\nThe returned Predicate will pass through its `this` context and arguments to each of the Predicate terms.\n\n### `connective.not: function (term : Predicate) => Predicate`\n\nReturns a Predicate negating `term`, roughly equivalent to writing\n\n    function (x) { return !Predicate(x) }\n\nThe returned Predicate will pass through its `this` context and arguments to `term`\n\n## running the tests\n\n    $ npm install\n    $ npm test\n\n## contributors\n\njden <jason@denizac.org>\n\n## license\nMIT. (c) 2013 Agile Diagnosis. See LICENSE.md",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/AgileDiagnosis/node-connective/issues"
  },
  "homepage": "https://github.com/AgileDiagnosis/node-connective",
  "_id": "connective@1.0.0",
  "dist": {
    "shasum": "dbf3d5e28318c3925e7591fa1bf2b183ed1f886f"
  },
  "_from": "connective@~1.0.0",
  "_resolved": "https://registry.npmjs.org/connective/-/connective-1.0.0.tgz"
}
